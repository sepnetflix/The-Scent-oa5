<?php

// Ensure SecurityMiddleware is available (likely included via index.php or autoloader)
require_once __DIR__ . '/../includes/SecurityMiddleware.php';
require_once __DIR__ . '/../includes/EmailService.php';
require_once __DIR__ . '/../config.php'; // For BASE_URL, SECURITY_SETTINGS

abstract class BaseController {
    protected PDO $db; // Use type hint
    // Remove direct property if only static methods are used from SecurityMiddleware
    // protected SecurityMiddleware $securityMiddleware;
    protected EmailService $emailService; // Use type hint
    protected array $responseHeaders = []; // Use type hint

    public function __construct(PDO $pdo) { // Use type hint
        $this->db = $pdo;
        // Note: Setting ATTR_ERRMODE is usually done in db.php during connection setup
        // $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        // $this->securityMiddleware = new SecurityMiddleware(); // Remove if only using static methods
        $this->emailService = new EmailService($this->db); // Pass the PDO connection
        $this->initializeSecurityHeaders();
    }

    protected function initializeSecurityHeaders(): void { // Add return type hint
        // Use security settings from config if available
        $this->responseHeaders = SECURITY_SETTINGS['headers'] ?? [
            // Sensible defaults if not configured
            'X-Frame-Options' => 'DENY',
            'X-Content-Type-Options' => 'nosniff',
            'X-XSS-Protection' => '1; mode=block',
            'Referrer-Policy' => 'strict-origin-when-cross-origin',
             // Default CSP - stricter than original, adjust as needed
            'Content-Security-Policy' => "default-src 'self'; script-src 'self' https://js.stripe.com; style-src 'self' 'unsafe-inline'; frame-src https://js.stripe.com; img-src 'self' data: https:; connect-src 'self' https://api.stripe.com",
            'Strict-Transport-Security' => 'max-age=31536000; includeSubDomains' // If HTTPS is enforced
        ];
        // Permissions-Policy can be added if needed
    }

    // Deprecating sendResponse/sendError in favor of jsonResponse/redirect for clarity
    /*
    protected function sendResponse($data, $statusCode = 200) { ... }
    protected function sendError($message, $statusCode = 400, $context = []) { ... }
    */

    // Deprecating validateRequest/validateField in favor of using SecurityMiddleware::validateInput directly
    /*
    protected function validateRequest($rules) { ... }
    protected function validateField($value, $rule) { ... }
    */

    // Deprecating getRequestInput in favor of direct access to $_GET, $_POST, file_get_contents('php://input')
    /*
    protected function getRequestInput() { ... }
    */

    // Deprecating sanitizeInput/sanitizeOutput in favor of direct htmlspecialchars() in views and SecurityMiddleware::validateInput
    /*
    protected function sanitizeInput($data) { ... }
    protected function sanitizeOutput($data) { ... }
    */

    // Deprecating shouldIncludeCSRFToken - CSRF generation handled by generateCSRFToken, validation by validateCSRF
    /*
    protected function shouldIncludeCSRFToken() { ... }
    */

    // Deprecating requireAuthentication/requireCSRFToken - use requireLogin/validateCSRF
    /*
    protected function requireAuthentication() { ... }
    protected function requireCSRFToken() { ... }
    */

    // Deprecating rateLimit - use validateRateLimit
    /*
    protected function rateLimit($key, $maxAttempts = 60, $decayMinutes = 1) { ... }
    */

    /**
     * Ensures the user is logged in. If not, redirects to the login page or sends a 401 JSON response.
     * Also performs session integrity checks and regeneration.
     *
     * @param bool $isAjaxRequest Set to true if the request is AJAX, to return JSON instead of redirecting.
     */
    protected function requireLogin(bool $isAjaxRequest = false): void { // Added optional param and return type
        if (!isset($_SESSION['user_id'])) {
            $details = [
                'ip' => $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN',
                'uri' => $_SERVER['REQUEST_URI'] ?? 'UNKNOWN'
            ];
            $this->logSecurityEvent('unauthorized_access_attempt', $details);

            if ($isAjaxRequest) {
                 $this->jsonResponse(['error' => 'Authentication required.'], 401); // Exit via jsonResponse
            } else {
                 $this->setFlashMessage('Please log in to access this page.', 'warning');
                 // Store intended destination
                 $_SESSION['redirect_after_login'] = $_SERVER['REQUEST_URI'] ?? (BASE_URL . 'index.php?page=account');
                 $this->redirect('index.php?page=login'); // Exit via redirect
            }
            // Explicit exit for safety, although jsonResponse/redirect should exit
            exit();
        }

        // Verify session integrity only if user_id is set
        if (!$this->validateSessionIntegrity()) {
            $this->terminateSession('Session integrity check failed'); // Handles exit
        }

        // Check session age and regenerate if needed
        if ($this->shouldRegenerateSession()) {
            $this->regenerateSession();
        }
    }

    /**
     * Ensures the user is logged in and has the 'admin' role.
     *
     * @param bool $isAjaxRequest Set to true if the request is AJAX, to return JSON instead of redirecting.
     */
    protected function requireAdmin(bool $isAjaxRequest = false): void { // Added optional param and return type
        $this->requireLogin($isAjaxRequest); // Check login first

        // Check role existence and value
        if (!isset($_SESSION['user_role']) || $_SESSION['user_role'] !== 'admin') {
            $details = [
                'user_id' => $_SESSION['user_id'] ?? null, // Should be set if requireLogin passed
                'ip' => $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN',
                'role_found' => $_SESSION['user_role'] ?? 'NOT SET'
            ];
            $this->logSecurityEvent('unauthorized_admin_attempt', $details);

            if ($isAjaxRequest) {
                 $this->jsonResponse(['error' => 'Admin access required.'], 403); // Exit via jsonResponse
            } else {
                 $this->setFlashMessage('You do not have permission to access this area.', 'error');
                 // Redirect to a safe page like account dashboard
                 $this->redirect('index.php?page=account'); // Exit via redirect
            }
            // Explicit exit for safety
            exit();
        }
    }

    /**
     * Validates input data using SecurityMiddleware.
     * This is a convenience wrapper. Direct use of SecurityMiddleware::validateInput is also fine.
     *
     * @param mixed $input The value to validate.
     * @param string $type The validation type (e.g., 'string', 'int', 'email').
     * @param array $options Additional validation options (e.g., ['min' => 1, 'max' => 100]).
     * @return mixed The validated and potentially sanitized input, or false on failure.
     */
    protected function validateInput(mixed $input, string $type, array $options = []): mixed {
        return SecurityMiddleware::validateInput($input, $type, $options);
    }

    /**
     * Gets the current CSRF token, generating one if necessary.
     * Relies on SecurityMiddleware.
     *
     * @return string The CSRF token.
     */
    protected function getCsrfToken(): string {
        return SecurityMiddleware::generateCSRFToken();
    }

    /**
     * Validates the CSRF token submitted in a POST request.
     * Relies on SecurityMiddleware, which throws an exception on failure.
     * It's recommended to call this at the beginning of POST action handlers.
     */
    protected function validateCSRF(): void { // Add return type hint
        SecurityMiddleware::validateCSRF(); // Throws exception on failure
    }

    /**
     * Sends a JSON response and terminates script execution.
     *
     * @param array $data The data to encode as JSON.
     * @param int $status The HTTP status code (default: 200).
     */
    protected function jsonResponse(array $data, int $status = 200): void { // Add return type hint
        // Prevent caching of JSON API responses
        header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');
        header('Cache-Control: post-check=0, pre-check=0', false);
        header('Pragma: no-cache');

        http_response_code($status);
        header('Content-Type: application/json; charset=UTF-8');

        // Apply security headers (optional here if globally applied by SecurityMiddleware::apply)
        // foreach ($this->responseHeaders as $header => $value) { header("$header: $value"); }

        echo json_encode($data); // Removed pretty print for efficiency
        exit;
    }

    /**
     * Performs an HTTP redirect and terminates script execution.
     * Prepends BASE_URL if the URL is relative.
     *
     * @param string $url The relative path or full URL to redirect to.
     * @param int $statusCode The HTTP redirect status code (default: 302).
     */
    protected function redirect(string $url, int $statusCode = 302): void { // Add return type hint
        // Basic check to prevent header injection from $url if it comes from user input
         // Allow relative paths starting with '/' or alphanumeric, or full URLs
        if (!preg_match('~^(/|[\w-]+.*|https?://)~', $url)) {
             error_log("Invalid redirect URL detected: " . $url);
             $url = '/'; // Redirect home as safe fallback
         }

        // Prepend BASE_URL if it's a relative path
        if (!preg_match('~^https?://~i', $url)) {
            $url = rtrim(BASE_URL, '/') . '/' . ltrim($url, '/');
        }

        // Validate the final URL structure (optional but recommended)
        if (!filter_var($url, FILTER_VALIDATE_URL)) {
            error_log("Redirect URL validation failed after constructing: " . $url);
            header('Location: ' . rtrim(BASE_URL, '/') . '/'); // Redirect home as safe fallback
            exit;
        }

        header('Location: ' . $url, true, $statusCode);
        exit;
    }

    /**
     * Sets a flash message in the session.
     *
     * @param string $message The message content.
     * @param string $type The message type ('info', 'success', 'warning', 'error').
     */
    protected function setFlashMessage(string $message, string $type = 'info'): void { // Add return type hint
        // Ensure session is started before trying to write to it
        if (session_status() !== PHP_SESSION_ACTIVE) {
             // Attempt to start session only if headers not sent
             if (!headers_sent()) {
                  session_start();
             } else {
                  // Cannot start session, log error
                  error_log("Session not active and headers already sent. Cannot set flash message: {$message}");
                  return;
             }
        }
        $_SESSION['flash_message'] = $message;
        $_SESSION['flash_type'] = $type;
        // Removed 'created' timestamp as it wasn't used and complicates testing
    }

    // Removed getFlashMessage - typically handled in header/view logic

    // Transaction helpers
    protected function beginTransaction(): void { $this->db->beginTransaction(); } // Add return type hint
    protected function commit(): void { $this->db->commit(); } // Add return type hint
    protected function rollback(): void { if ($this->db->inTransaction()) { $this->db->rollBack(); } } // Add return type hint

    // User helpers
    protected function getCurrentUser(): ?array { return $_SESSION['user'] ?? null; } // Add return type hint
    protected function getUserId(): ?int { return isset($_SESSION['user']['id']) ? (int)$_SESSION['user']['id'] : null; } // Add return type hint

    // Removed validateAjax - use header checks in specific controller actions if needed

    // Removed isRateLimited - use validateRateLimit instead

    /**
     * Renders a view template with provided data.
     *
     * @param string $viewPath Path to the view file relative to the views directory (e.g., 'account/dashboard').
     * @param array $data Data to extract into the view's scope.
     * @return string The rendered HTML output.
     * @throws Exception If the view file is not found.
     */
    protected function renderView(string $viewPath, array $data = []): string { // Add return type hint
        // Ensure CSRF token is available for views that might need it
        if (!isset($data['csrfToken'])) {
             $data['csrfToken'] = $this->getCsrfToken();
        }
        // Ensure user data is available if needed by layout/views
        if (!isset($data['user']) && isset($_SESSION['user'])) {
            $data['user'] = $_SESSION['user'];
        }

        // Extract data to make it available in view
        extract($data);

        ob_start();
        // Use ROOT_PATH constant defined in index.php for reliability
        $viewFile = ROOT_PATH . '/views/' . $viewPath . '.php';

        if (!file_exists($viewFile)) {
            ob_end_clean(); // Clean buffer before throwing
            throw new Exception("View not found: {$viewFile}");
        }
        try {
            include $viewFile;
        } catch (\Throwable $e) {
             ob_end_clean(); // Clean buffer if view inclusion fails
             error_log("Error rendering view {$viewPath}: " . $e->getMessage());
             // It's often better to let the global ErrorHandler catch this
             throw $e; // Re-throw the error
        }
        return ob_get_clean();
    }

    // Removed validateFileUpload - use SecurityMiddleware::validateFileUpload directly or wrap if needed

    // Removed log - use logAuditTrail or logSecurityEvent for specific purposes, or error_log for general debugging

    // Removed checkRateLimit - use validateRateLimit instead

    /**
     * Logs an action to the audit trail database table.
     *
     * @param string $action A code representing the action performed (e.g., 'login_success', 'product_update').
     * @param int|null $userId The ID of the user performing the action, or null if anonymous/system.
     * @param array $details Additional context or data related to the action (will be JSON encoded).
     */
    protected function logAuditTrail(string $action, ?int $userId, array $details = []): void { // Add type hints
        try {
            $stmt = $this->db->prepare("
                INSERT INTO audit_log (action, user_id, ip_address, user_agent, details, created_at)
                VALUES (?, ?, ?, ?, ?, NOW())
            ");
            $stmt->execute([
                $action,
                $userId, // Use the passed userId, allowing null
                $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN',
                $_SERVER['HTTP_USER_AGENT'] ?? 'UNKNOWN',
                json_encode($details) // Ensure details are encoded
            ]);
        } catch (Exception $e) {
            // Log failure to standard PHP error log
            error_log("Audit logging failed for action '{$action}': " . $e->getMessage());
        }
    }

    /**
     * Validates session integrity markers (User Agent and IP Address).
     * Should be called after confirming user_id is set in session.
     *
     * @return bool True if markers are present and match, false otherwise.
     */
     // --- VISIBILITY FIX APPLIED HERE ---
    protected function validateSessionIntegrity(): bool { // Changed from private to protected
        // Check if essential markers exist
        if (!isset($_SESSION['user_agent']) || !isset($_SESSION['ip_address'])) {
             $this->logSecurityEvent('session_integrity_markers_missing', ['user_id' => $_SESSION['user_id'] ?? null]);
            return false; // Markers should have been set on login
        }

        // Compare User Agent
        $userAgentMatch = ($_SESSION['user_agent'] === ($_SERVER['HTTP_USER_AGENT'] ?? ''));
        // Compare IP Address (allow simple mismatch logging for now, strict check below)
        $ipAddressMatch = ($_SESSION['ip_address'] === ($_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN'));

        if (!$userAgentMatch || !$ipAddressMatch) {
             $this->logSecurityEvent('session_integrity_mismatch', [
                 'user_id' => $_SESSION['user_id'] ?? null,
                 'session_ip' => $_SESSION['ip_address'],
                 'current_ip' => $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN',
                 'ip_match' => $ipAddressMatch,
                 'session_ua' => $_SESSION['user_agent'],
                 'current_ua' => $_SERVER['HTTP_USER_AGENT'] ?? '',
                 'ua_match' => $userAgentMatch
             ]);
             // Decide if mismatch should invalidate session - usually yes for strict security
             return false; // Treat mismatch as invalid
        }
        return true;
    }

    /**
     * Checks if the session regeneration interval has passed.
     *
     * @return bool True if session should be regenerated, false otherwise.
     */
     // --- VISIBILITY FIX APPLIED HERE ---
    protected function shouldRegenerateSession(): bool { // Changed from private to protected
        $interval = SECURITY_SETTINGS['session']['regenerate_id_interval'] ?? 900; // Default 15 mins from config
        // Check if last_regeneration is set and if interval has passed
        return !isset($_SESSION['last_regeneration']) || (time() - $_SESSION['last_regeneration']) > $interval;
    }

    /**
     * Regenerates the session ID securely, preserving necessary session data.
     */
    // --- VISIBILITY FIX APPLIED HERE ---
    protected function regenerateSession(): void { // Changed from private to protected
        if (session_status() !== PHP_SESSION_ACTIVE) {
            return; // Can't regenerate if session not active
        }

        // Store essential data to transfer to the new session ID
        $currentSessionData = $_SESSION;

        if (session_regenerate_id(true)) { // Destroy old session data associated with the old ID
            // Restore data - may need more specific keys depending on what needs preserving
             $_SESSION = $currentSessionData; // Restore all data
             // Crucially, update the regeneration timestamp
             $_SESSION['last_regeneration'] = time();
        } else {
             // Log failure if regeneration fails (critical)
             $userId = $_SESSION['user_id'] ?? 'Unknown';
             error_log("CRITICAL: Session regeneration failed for user ID: " . $userId);
             $this->logSecurityEvent('session_regeneration_failed', ['user_id' => $userId]);
             // Consider terminating the session as a safety measure
             $this->terminateSession('Session regeneration failed.');
        }
    }

    /**
     * Terminates the current session securely.
     * Logs the reason and redirects to login page.
     *
     * @param string $reason The reason for termination (for logging).
     */
    protected function terminateSession(string $reason): void { // Already protected, added return type hint
        $userId = $_SESSION['user_id'] ?? null;
        $this->logSecurityEvent('session_terminated', [
            'reason' => $reason,
            'user_id' => $userId,
            'ip' => $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN'
        ]);

        // Standard session destruction steps
        $_SESSION = array(); // Unset all variables
        if (ini_get("session.use_cookies")) { // Delete the session cookie
            $params = session_get_cookie_params();
            setcookie(session_name(), '', time() - 42000,
                $params["path"], $params["domain"],
                $params["secure"], $params["httponly"]
            );
        }
        session_destroy(); // Destroy session data on server

        // Redirect to login page
        $this->redirect('index.php?page=login&reason=session_terminated'); // Use redirect helper
    }

    /**
     * Checks and enforces rate limits for a specific action based on IP address.
     * Uses APCu as the backend cache. Throws Exception on limit exceeded.
     *
     * @param string $action The identifier for the action being rate limited (e.g., 'login', 'password_reset').
     * @throws Exception If rate limit is exceeded (HTTP 429 implied).
     */
    protected function validateRateLimit(string $action): void { // Add return type hint
        // Check if rate limiting is enabled globally
        if (!isset(SECURITY_SETTINGS['rate_limiting']['enabled']) || !SECURITY_SETTINGS['rate_limiting']['enabled']) {
            return; // Skip if disabled
        }

        // Determine settings for this specific action
        $defaultSettings = [
            'window' => SECURITY_SETTINGS['rate_limiting']['default_window'] ?? 3600,
            'max_requests' => SECURITY_SETTINGS['rate_limiting']['default_max_requests'] ?? 100
        ];
        $settings = SECURITY_SETTINGS['rate_limiting']['endpoints'][$action] ?? $defaultSettings;

        $ip = $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN';
        if ($ip === 'UNKNOWN') {
            // Cannot rate limit if IP is unknown, log maybe? Or allow? For now, allow but log warning.
             error_log("Rate Limiting Warning: Cannot determine client IP address for action '{$action}'.");
             return;
        }

        // Check whitelist
        if (!empty(SECURITY_SETTINGS['rate_limiting']['ip_whitelist']) && in_array($ip, SECURITY_SETTINGS['rate_limiting']['ip_whitelist'])) {
            return; // Skip whitelisted IPs
        }

        // Use APCu for rate limiting (Ensure APCu extension is installed and enabled)
        if (function_exists('apcu_enabled') && apcu_enabled()) {
            $key = "rate_limit:{$action}:{$ip}";
            $attempts = apcu_fetch($key, $success);

            if (!$success) { // First attempt in the window
                apcu_store($key, 1, $settings['window']); // Store count 1 with TTL
                $attempts = 1;
            } else {
                $attempts = apcu_inc($key); // Increment if key exists
            }

            if ($attempts > $settings['max_requests']) {
                $this->logSecurityEvent('rate_limit_exceeded', [
                    'action' => $action, 'ip' => $ip, 'limit' => $settings['max_requests'], 'window' => $settings['window']
                ]);
                // Throw exception to be caught by index.php or specific controller
                throw new Exception('Rate limit exceeded. Please try again later.', 429);
            }
        } else {
            // APCu not available - Log a warning, behavior depends on desired security posture (fail open/closed)
            // Failing open here for simplicity, but logging the event.
            error_log("Rate Limiting Warning: APCu extension is not available or enabled. Rate limiting skipped for action '{$action}' from IP {$ip}.");
            $this->logSecurityEvent('rate_limit_backend_unavailable', ['action' => $action, 'ip' => $ip]);
            // To fail closed (more secure), uncomment the next line:
            // throw new Exception('Rate limiting service unavailable. Please try again later.', 503);
        }
    }

    // Removed validateCSRFToken - use validateCSRF
    // Removed generateCSRFToken - use getCsrfToken

    /**
     * Logs a security-related event to the designated security log file.
     *
     * @param string $event A code for the security event (e.g., 'login_failure', 'csrf_validation_failed').
     * @param array $details Contextual details about the event.
     */
     protected function logSecurityEvent(string $event, array $details = []): void { // Add return type hint
         // Add common context automatically
         $commonContext = [
             'timestamp' => date('Y-m-d H:i:s T'), // Include timezone
             'user_id' => $this->getUserId(), // Use helper method
             'ip' => $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN',
             'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'UNKNOWN',
             'request_uri' => $_SERVER['REQUEST_URI'] ?? 'N/A',
             'request_method' => $_SERVER['REQUEST_METHOD'] ?? 'N/A'
         ];
         $logDetails = array_merge($commonContext, $details); // Merge, letting specific details override common ones if needed

         $logMessage = sprintf(
             "[SECURITY] Event: %s | Details: %s",
             $event,
             json_encode($logDetails) // Encode all details as JSON
         );

         // Log to the file specified in config
         $logFile = SECURITY_SETTINGS['logging']['security_log'] ?? (__DIR__ . '/../logs/security.log');
         // Ensure directory exists and is writable (simple check)
         $logDir = dirname($logFile);
         if (!is_dir($logDir)) { @mkdir($logDir, 0750, true); } // Attempt creation

         if (is_writable($logDir) && (file_exists($logFile) ? is_writable($logFile) : true) ) {
              error_log($logMessage . PHP_EOL, 3, $logFile);
         } else {
              // Fallback to standard PHP error log if specific log file isn't writable
              error_log("Security Log Write Failed! " . $logMessage);
         }
      }

} // End of BaseController class
